{"version":3,"file":"component---src-pages-prueba-final-js-1e840d517d027634d87c.js","mappings":"uKAgBA,IACA,EADiB,cAdjB,SAA+BA,EAAOC,GACpC,OAAoB,gBAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,QAAS,YACTC,KAAM,eACN,cAAe,OACfC,IAAKN,GACJD,GAAqB,gBAAoB,OAAQ,CAClDQ,SAAU,UACVC,EAAG,oHACHC,SAAU,gBCTRC,EAAgB,CACpB,oBACA,mBACA,qBAMF,IA6DA,EA7DwB,SAAC,GAA+C,IAJlDC,EAAKC,EAIAC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACrD,GAA0BC,EAAAA,EAAAA,WAAS,GAA5BC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAA5BG,EAAP,KAAcC,EAAd,KAeA,OACE,wBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,MACJZ,EAAiBM,IACnBD,GAAS,GACTH,EAAUO,IAEVJ,GAAS,KAKT,yBAAOQ,QAAQ,OAAOC,UAAU,kBAC7Bb,GAEH,uBAAKa,UAAU,6CACb,yBACEC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHH,UAAU,0KACVI,YAAY,YAEZC,MAAOb,EACPc,SA5BkB,SAACX,GACzBJ,GAAS,GACTE,EAASE,EAAEY,OAAOF,QA2BZ,eAAa,SAEdf,GACC,uBAAKU,UAAU,yEACb,gBAAC,EAAD,CACEA,UAAU,uBACV,cAAY,WAMpB,qBACEA,YAAeV,GAAS,aAAf,kCACTa,GAAG,eAEFpB,GApDaC,EAoDc,EApDTC,EAoDYF,EAAcyB,OAnD5CC,KAAKC,MAAMD,KAAKE,UAAY1B,EAAMD,IAAQA,KAsD7C,0BACEiB,KAAK,SACLD,UAAU,sOAFZ,oB,mEC7DS,SAASY,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,uBAAKb,UAAU,0BAA0Ba,K,8GCA5C9B,EAAgB,CACpB,oBACA,mBACA,qBAMF,IAgGA,EAhGyB,SAAC,GAMnB,IAVeC,EAAKC,EAKzB6B,EAKI,EALJA,kBACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,UACA7B,EACI,EADJA,UAEA,GAA0BC,EAAAA,EAAAA,WAAS,GAA5BC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAA9B6B,EAAP,KAAeC,EAAf,KACA,GAA4B9B,EAAAA,EAAAA,UAAS,IAA9B+B,EAAP,KAAeC,EAAf,KAmBA,OACE,wBAAM3B,SAXa,SAACC,GACpBA,EAAEC,iBAEEkB,EAAkBI,IAAWF,EAAkBI,IACjD7B,GAAS,GACTH,EAAUO,IAEVJ,GAAS,KAKT,yBAAOQ,QAAQ,OAAOC,UAAU,iBAC7Be,GAEH,uBAAKf,UAAU,6CACb,yBACEC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHH,UAAU,0KACVI,YAAY,YAEZC,MAAOa,EACPZ,SAhCkB,SAACX,GACzBJ,GAAS,GACT4B,EAAUxB,EAAEY,OAAOF,QA+Bb,eAAa,UAWjB,yBAAON,QAAQ,OAAOC,UAAU,sBAC7BiB,GAEH,uBAAKjB,UAAU,6CACb,yBACEC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHH,UAAU,0KACVI,YAAY,YAEZC,MAAOe,EACPd,SApDmB,SAACX,GAC1BJ,GAAS,GACT8B,EAAU1B,EAAEY,OAAOF,QAmDb,eAAa,UAYjB,qBACEL,YAAeV,GAAS,aAAf,kCACTa,GAAG,eAEFpB,GAvFaC,EAuFc,EAvFTC,EAuFYF,EAAcyB,OAtF5CC,KAAKC,MAAMD,KAAKE,UAAY1B,EAAMD,IAAQA,KAyF7C,0BACEiB,KAAK,SACLD,UAAU,sOAFZ,0BC1FS,SAASsB,IACtB,OAA0BjC,EAAAA,EAAAA,WAAS,GACnC,GADA,WACgCA,EAAAA,EAAAA,UAAS,KAAzC,UAoBA,OACE,gBAAC,IAAD,KACE,2BAASW,UAAU,iFACjB,sBAAIA,UAAU,qFAAd,yBAGA,uBACEA,UAAU,oBACVuB,IAAI,eACJC,MAAM,WACNC,IAAI,aAEN,gBAAC,EAAD,CACEV,UAAU,yBACVD,kBAAmB,SAACtB,GAIlB,OAHsBA,EACnBkC,UAAU,QACVC,QAAQ,mBAAoB,IACRC,cAAcC,SAAS,aAEhDZ,UAAU,yBACVD,kBAAmB,SAACxB,GAIlB,OAHsBA,EACnBkC,UAAU,QACVC,QAAQ,mBAAoB,IACRC,cAAcC,SAAS,WAEhDzC,UAAW,kBAAM0C,EAAAA,EAAAA,IAAS","sources":["webpack://gatsby-blog-demo/./node_modules/@heroicons/react/solid/esm/ExclamationCircleIcon.js","webpack://gatsby-blog-demo/./src/components/OneQuestionForm.js","webpack://gatsby-blog-demo/./src/components/container.js","webpack://gatsby-blog-demo/./src/components/TwoQuestionsForm.js","webpack://gatsby-blog-demo/./src/pages/prueba-final.js"],"sourcesContent":["import * as React from \"react\";\n\nfunction ExclamationCircleIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\",\n    clipRule: \"evenodd\"\n  }));\n}\n\nvar ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import React, { useState } from \"react\";\nimport { ExclamationCircleIcon } from \"@heroicons/react/solid\";\n\nconst errorMessages = [\n  \"No es tan difícil\",\n  \"Vamos, tu puedes\",\n  \"Continúa buscando\",\n];\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst OneQuestionForm = ({ validateResponse, question, onSuccess }) => {\n  const [error, setError] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const handleChangeInput = (e) => {\n    setError(false);\n    setInput(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log();\n    if (validateResponse(input)) {\n      setError(false);\n      onSuccess(e);\n    } else {\n      setError(true);\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"text\" className=\"block text-lg \">\n        {question}\n      </label>\n      <div className=\"mt-4 relative rounded-md shadow-sm border\">\n        <input\n          type=\"text\"\n          name=\"text\"\n          id=\"text\"\n          className=\"block w-full my-1 pr-10 pl-2 border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md leading-8\"\n          placeholder=\"respuesta\"\n          // defaultValue=\"adamwathan\"\n          value={input}\n          onChange={handleChangeInput}\n          aria-invalid=\"true\"\n        />\n        {error && (\n          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\n            <ExclamationCircleIcon\n              className=\"h-5 w-5 text-red-500\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        )}\n      </div>\n\n      <p\n        className={`${!error && \"invisible\"} mt-1 text-sm text-red-600 py-2`}\n        id=\"email-error\"\n      >\n        {errorMessages[getRandomInt(0, errorMessages.length)]}\n      </p>\n\n      <button\n        type=\"submit\"\n        className=\" mt-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n      >\n        Probar suerte\n      </button>\n    </form>\n  );\n};\n\nexport default OneQuestionForm;\n","import React from \"react\";\n\nexport default function Container({ children }) {\n  return <div className=\"container mx-auto px-5\">{children}</div>\n}\n","import React, { useState } from \"react\";\nimport { ExclamationCircleIcon } from \"@heroicons/react/solid\";\n\nconst errorMessages = [\n  \"No es tan difícil\",\n  \"Vamos, tu puedes\",\n  \"Continúa buscando\",\n];\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst TwoQuestionsForm = ({\n  validateResponse1,\n  question1,\n  validateResponse2,\n  question2,\n  onSuccess,\n}) => {\n  const [error, setError] = useState(false);\n  const [input1, setInput1] = useState(\"\");\n  const [input2, setInput2] = useState(\"\");\n  const handleChangeInput = (e) => {\n    setError(false);\n    setInput1(e.target.value);\n  };\n  const handleChangeInput2 = (e) => {\n    setError(false);\n    setInput2(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log();\n    if (validateResponse1(input1) && validateResponse2(input2)) {\n      setError(false);\n      onSuccess(e);\n    } else {\n      setError(true);\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"text\" className=\"block text-lg\">\n        {question1}\n      </label>\n      <div className=\"mt-4 relative rounded-md shadow-sm border\">\n        <input\n          type=\"text\"\n          name=\"text\"\n          id=\"text\"\n          className=\"block w-full my-1 pr-10 pl-2 border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md leading-8\"\n          placeholder=\"respuesta\"\n          // defaultValue=\"adamwathan\"\n          value={input1}\n          onChange={handleChangeInput}\n          aria-invalid=\"true\"\n        />\n        {/*{error && (*/}\n        {/*  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">*/}\n        {/*    <ExclamationCircleIcon*/}\n        {/*      className=\"h-5 w-5 text-red-500\"*/}\n        {/*      aria-hidden=\"true\"*/}\n        {/*    />*/}\n        {/*  </div>*/}\n        {/*)}*/}\n      </div>\n      <label htmlFor=\"text\" className=\"block text-lg mt-4\">\n        {question2}\n      </label>\n      <div className=\"mt-4 relative rounded-md shadow-sm border\">\n        <input\n          type=\"text\"\n          name=\"text\"\n          id=\"text\"\n          className=\"block w-full my-1 pr-10 pl-2 border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md leading-8\"\n          placeholder=\"respuesta\"\n          // defaultValue=\"adamwathan\"\n          value={input2}\n          onChange={handleChangeInput2}\n          aria-invalid=\"true\"\n        />\n        {/*{error && (*/}\n        {/*  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">*/}\n        {/*    <ExclamationCircleIcon*/}\n        {/*      className=\"h-5 w-5 text-red-500\"*/}\n        {/*      aria-hidden=\"true\"*/}\n        {/*    />*/}\n        {/*  </div>*/}\n        {/*)}*/}\n      </div>\n\n      <p\n        className={`${!error && \"invisible\"} mt-1 text-sm text-red-600 py-2`}\n        id=\"email-error\"\n      >\n        {errorMessages[getRandomInt(0, errorMessages.length)]}\n      </p>\n\n      <button\n        type=\"submit\"\n        className=\" mt-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n      >\n        Ir a la prueba final\n      </button>\n    </form>\n  );\n};\n\nexport default TwoQuestionsForm;\n","import React, { useState } from \"react\";\n\nimport { graphql, navigate } from \"gatsby\";\nimport { ExclamationCircleIcon } from \"@heroicons/react/solid\";\nimport OneQuestionForm from \"../components/OneQuestionForm\";\nimport Container from \"../components/container\";\nimport TwoQuestionsForm from \"../components/TwoQuestionsForm\";\n\nexport default function Index() {\n  const [error, setError] = useState(false);\n  const [password, setPassword] = useState(\"\");\n\n  const handleChangePassword = (e) => {\n    setError(false);\n    setPassword(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (\n      password.toUpperCase().includes(\"LUA\") ||\n      password.toUpperCase().includes(\"LÚA\")\n    ) {\n      setError(false);\n      navigate(\"/\");\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <Container>\n      <section className=\"flex-col md:flex-row flex items-center md:justify-between mt-8 mb-16 md:mb-12\">\n        <h1 className=\"text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8 text-center\">\n          Necesitáis 2 códigos.\n        </h1>\n        <img\n          className=\"mt-5 rounded-2xl \"\n          src=\"/candado.jpg\"\n          title=\"Borracho\"\n          alt=\"Borracho\"\n        />\n        <TwoQuestionsForm\n          question1=\"Introduce el código 1?\"\n          validateResponse1={(input) => {\n            let normalizedInput = input\n              .normalize(\"NFKD\")\n              .replace(/[\\u0300-\\u036f]/g, \"\");\n            return normalizedInput.toLowerCase().includes(\"caminito\");\n          }}\n          question2=\"Introduce el código 2?\"\n          validateResponse2={(input) => {\n            let normalizedInput = input\n              .normalize(\"NFKD\")\n              .replace(/[\\u0300-\\u036f]/g, \"\");\n            return normalizedInput.toLowerCase().includes(\"payaso\");\n          }}\n          onSuccess={() => navigate(\"/condiciones\")}\n        />\n      </section>\n      {/*<form onSubmit={handleSubmit}>*/}\n      {/*  <label*/}\n      {/*    htmlFor=\"password\"*/}\n      {/*    className=\"block text-md font-medium text-gray-700\"*/}\n      {/*  >*/}\n      {/*    Seguro que adivináis la contraseña para entrar*/}\n      {/*  </label>*/}\n      {/*  <div className=\"mt-1 relative rounded-md shadow-sm\">*/}\n      {/*    <input*/}\n      {/*      type=\"password\"*/}\n      {/*      name=\"password\"*/}\n      {/*      id=\"password\"*/}\n      {/*      className=\"block w-full pr-10 border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md\"*/}\n      {/*      // placeholder=\"you@example.com\"*/}\n      {/*      // defaultValue=\"adamwathan\"*/}\n      {/*      value={password}*/}\n      {/*      onChange={handleChangePassword}*/}\n      {/*      aria-invalid=\"true\"*/}\n      {/*      aria-describedby=\"email-error\"*/}\n      {/*    />*/}\n      {/*    {error && (*/}\n      {/*      <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">*/}\n      {/*        <ExclamationCircleIcon*/}\n      {/*          className=\"h-5 w-5 text-red-500\"*/}\n      {/*          aria-hidden=\"true\"*/}\n      {/*        />*/}\n      {/*      </div>*/}\n      {/*    )}*/}\n      {/*  </div>*/}\n      {/*  {error && (*/}\n      {/*    <p className=\"mt-2 text-sm text-red-600 py-2\" id=\"email-error\">*/}\n      {/*      No es tan difícil*/}\n      {/*    </p>*/}\n      {/*  )}*/}\n\n      {/*  <button*/}\n      {/*    type=\"submit\"*/}\n      {/*    className=\" mt-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"*/}\n      {/*  >*/}\n      {/*    Probar suerte*/}\n      {/*  </button>*/}\n      {/*</form>*/}\n    </Container>\n  );\n}\n"],"names":["props","svgRef","Object","assign","xmlns","viewBox","fill","ref","fillRule","d","clipRule","errorMessages","min","max","validateResponse","question","onSuccess","useState","error","setError","input","setInput","onSubmit","e","preventDefault","console","log","htmlFor","className","type","name","id","placeholder","value","onChange","target","length","Math","floor","random","Container","children","validateResponse1","question1","validateResponse2","question2","input1","setInput1","input2","setInput2","Index","src","title","alt","normalize","replace","toLowerCase","includes","navigate"],"sourceRoot":""}